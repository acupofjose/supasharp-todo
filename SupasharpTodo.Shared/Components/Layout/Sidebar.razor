@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@using SupasharpTodo.Shared.Interfaces
@using SupasharpTodo.Shared.Components.Icons
@using SupasharpTodo.Shared.Models
@using Toolbelt.Blazor.HotKeys2
@inject IAppStateService AppStateService
@inject NavigationManager NavManager
@inject HotKeys HotKeys
@inject IJSRuntime JsRuntime

<ul class="menu p-4 w-60 md:mb-2 py-6 h-full bg-base-200 text-base-content rounded-r-lg relative text-xl">
    @foreach (var item in _navigationItems)
    {
        <li @onclick="() => item.OnClick?.Invoke(item.Location)" class="border-2 rounded-lg @(item.IsHighlighted ? "border-indigo-500/75" : "border-transparent")">
            <NavigationIcon Title="@item.Title" Location="@item.Location" IconComponent="@item.IconType" IconClasses="@item.IconClasses"></NavigationIcon>
        </li>
    }
    <li class="absolute bottom-1 left-0 w-full">
        @if (IsAddingProject)
        {
            <div class="form-control px-2 flex content-stretch items-stretch justify-center" @onfocusout="OnProjectInputFocusOut">
                <input @ref="ListInputRef" @bind="ListName" type="text" placeholder="List Name" class="input input-bordered input-sm flex-1"/>
            </div>
        }
        else
        {
            <div class="px-2 w-full flex">
                <button @onclick="OnAddProjectClicked" class="btn btn-sm btn-default normal-case mx-1 flex-1">Create New List</button>
            </div>
        }
    </li>
</ul>

<label @ref="HiddenDrawerButtonRef" id="programmatic-drawer-button" for="drawer" class="hidden drawer-button"></label>

@code
{
    private List<NavigationItem> _navigationItems = new();

    private int CurrentNavigationItemIndex => _navigationItems.FindIndex(i => NavManager.Uri.Contains(i.Location.Trim('/')));
    private int _highlightedIndex = -1;

    private HotKeysContext? _hotkeysContext;

    private ElementReference? HiddenDrawerButtonRef { get; set; }
    private ElementReference? ListInputRef { get; set; }

    private bool IsAddingProject { get; set; } = false;
    private string? ListName { get; set; }

    protected override void OnInitialized()
    {
        NavManager.LocationChanged += NavManagerOnLocationChanged;
        AppStateService.AddFocusedAppSectionChangedListener(OnFocusedAppSectionChanged);

        _navigationItems = new List<NavigationItem>
        {
            new("Inbox", "/inbox", typeof(InboxIcon), "w-4 h-4 stroke-accent", GoToNavigationItem),
            new("Today", "/today", typeof(TodayIcon), "w-4 h-4 stroke-warning", GoToNavigationItem),
            new("Upcoming", "/upcoming", typeof(UpcomingIcon), "w-4 h-4 stroke-red-500", GoToNavigationItem),
            new("Logbook", "/logbook", typeof(LogbookIcon), "w-4 h-4 stroke-green-500", GoToNavigationItem),
            new("Trash", "/trash", typeof(TrashIcon), "w-4 h-4 stroke-gray-300", GoToNavigationItem),
        };

        RegisterHotkeys();
    }

    public void Dispose()
    {
        _hotkeysContext?.Dispose();
    }

    private void NavManagerOnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        ClearHighlights();
    }

    private void Toggle() =>
        JsRuntime.InvokeAsync<object?>("triggerClick", HiddenDrawerButtonRef);

    private void ClearHighlights()
    {
        foreach (var item in _navigationItems)
            item.IsHighlighted = false;

        StateHasChanged();
    }

    private async void OnAddProjectClicked()
    {
        IsAddingProject = true;

        await Task.Delay(100);
        ListInputRef?.FocusAsync();
    }

    private void OnProjectInputFocusOut()
    {
        IsAddingProject = false;
        ListName = string.Empty;
    }

    private void OnFocusedAppSectionChanged(IAppStateService.AppSection lostfocus, IAppStateService.AppSection gainedfocus)
    {
        if (gainedfocus != IAppStateService.AppSection.Menu) return;

        _navigationItems[CurrentNavigationItemIndex].IsHighlighted = true;
        StateHasChanged();
    }

    private void GoToNavigationItem(string location)
    {
        NavManager.NavigateTo(location);
        Toggle();
    }

    #region Keyboard Input Handlers

    private void RegisterHotkeys()
    {
        _hotkeysContext = HotKeys.CreateContext()
            .Add(Code.ArrowDown, OnArrowDown, exclude: Exclude.Default)
            .Add(Code.ArrowUp, OnArrowUp, exclude: Exclude.Default)
            .Add(Code.ArrowRight, OnArrowRight, exclude: Exclude.Default)
            .Add(Code.Escape, OnEscapePressed, exclude: Exclude.Default)
            .Add(Code.Enter, OnEnterPressed, exclude: Exclude.Default);
    }

    private void OnArrowUp(HotKeyEntryByCode obj)
    {
        if (AppStateService.FocusedAppSection != IAppStateService.AppSection.Menu)
            return;

        var currentIndex = _highlightedIndex == -1 ? CurrentNavigationItemIndex : _highlightedIndex;
        _highlightedIndex = currentIndex - 1 >= 0 ? currentIndex - 1 : _navigationItems.Count - 1;

        ClearHighlights();

        _navigationItems[_highlightedIndex].IsHighlighted = true;
        StateHasChanged();
    }

    private void OnArrowDown(HotKeyEntryByCode obj)
    {
        if (AppStateService.FocusedAppSection != IAppStateService.AppSection.Menu)
            return;

        var currentIndex = _highlightedIndex == -1 ? CurrentNavigationItemIndex : _highlightedIndex;
        _highlightedIndex = currentIndex + 1 < _navigationItems.Count ? currentIndex + 1 : 0;

        ClearHighlights();

        _navigationItems[_highlightedIndex].IsHighlighted = true;
        StateHasChanged();
    }

    private void OnArrowRight(HotKeyEntryByCode obj)
    {
        if (AppStateService.FocusedAppSection != IAppStateService.AppSection.Menu)
            return;

        ClearHighlights();
        AppStateService.SetFocusedAppSection(IAppStateService.AppSection.TodoList);
    }

    private void OnEnterPressed(HotKeyEntryByCode obj)
    {
        if (AppStateService.FocusedAppSection != IAppStateService.AppSection.Menu)
            return;

        if (_highlightedIndex == -1) return;

        NavManager.NavigateTo(_navigationItems[_highlightedIndex].Location);
    }

    private void OnEscapePressed(HotKeyEntryByCode obj)
    {
        if (AppStateService.FocusedAppSection != IAppStateService.AppSection.Menu)
            return;

        ClearHighlights();
        AppStateService.SetFocusedAppSection(IAppStateService.AppSection.TodoList);
    }

    #endregion
}