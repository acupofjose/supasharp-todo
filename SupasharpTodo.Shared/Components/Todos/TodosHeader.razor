@using Toolbelt.Blazor.HotKeys2
@using Microsoft.AspNetCore.Components.Web
@using SupasharpTodo.Shared.Interfaces
@using SupasharpTodo.Shared.Services
@using SupasharpTodo.Shared.Components.Icons
@inject HotKeys HotKeys
@inject IAppStateService AppStateService
@implements IDisposable

<div class="relative">
    <div class="card w-full bg-base-300 dark:bg-neutral text-center card-compact py-0 z-[1]">
        <div class="card-body !py-2 !px-1">
            <div class="card-title flex w-full !mb-0">
                <label for="drawer" class="btn btn-ghost btn-small drawer-button">
                    @switch (SelectedView)
                    {
                        case TodosView.TodoViewType.Inbox:
                            <InboxIcon/>
                            break;
                        case TodosView.TodoViewType.Today:
                            <TodayIcon/>
                            break;
                        case TodosView.TodoViewType.Upcoming:
                            <UpcomingIcon/>
                            break;
                        case TodosView.TodoViewType.Logbook:
                            <LogbookIcon/>
                            break;
                        case TodosView.TodoViewType.Trash:
                            <TrashIcon/>
                            break;
                    }
                    <h1 class="flex-auto prose dark:prose-invert prose-2xl text-left normal-case">@SelectedView.ToString()</h1>
                </label>
                <div class="flex-1 text-end">
                    @switch (SelectedView)
                    {
                        case TodosView.TodoViewType.Inbox:
                        case TodosView.TodoViewType.Today:
                            <button @ref="AddButtonRef" @onclick="OnAddClicked" class="btn p-2 mr-2.5 scale-75 transition-all hover:scale-90 @(IsEditing ? "scale-90 btn-info" : "btn-ghost")">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                </svg>
                            </button>
                            break;
                    }
                </div>
            </div>
        </div>
    </div>

    <TodoForm @ref="TodoForm" @bind-IsEditing="IsEditing" SelectedView="@SelectedView"/>
</div>

@code
{
    [CascadingParameter]
    public TodosView.TodoViewType SelectedView { get; set; } = TodosView.TodoViewType.Inbox;

    HotKeysContext _hotKeysContext;
    private bool IsEditing { get; set; } = false;

    private TodoForm TodoForm { get; set; }

    private ElementReference? AddButtonRef { get; set; }

    protected override void OnInitialized()
    {
        _hotKeysContext = HotKeys.CreateContext()
            .Add(ModCode.Alt, Code.N, OnAltNPressed, "Create New Todo.")
            .Add(Code.Escape, EscapePressed, exclude: Exclude.None);
    }

    public void Dispose()
    {
        _hotKeysContext.Dispose();
    }

    private void OnAddClicked()
    {
        IsEditing = !IsEditing;
        TodoForm.Focus();
    }

    private void OnAltNPressed(HotKeyEntryByCode obj)
    {
        if (AppStateService.FocusedAppSection != IAppStateService.AppSection.TodoList)
            return;

        Console.WriteLine("Alt + N pressed");
        IsEditing = true;
        TodoForm.Focus();
    }

    private void EscapePressed(HotKeyEntryByCode obj)
    {
        if (AppStateService.FocusedAppSection != IAppStateService.AppSection.TodoList)
            return;

        IsEditing = false;
        AddButtonRef?.FocusAsync();
    }
}