@using SupasharpTodo.Shared.Models
@using SupasharpTodo.Shared.Interfaces
@inject ITodoService TodoService

<div class="card w-full bg-base-300 dark:bg-neutral text-center card-compact py-0 my-2 hover:bg-base-500 dark:hover:bg-slate-700 transition-colors">
    <div class="card-body !py-1 w-full flex flex-col">
        <div class="w-full flex flex-row align-middle items-center py-2">
            <div class="w-4">
                @switch (SelectedView)
                {
                    case TodosView.TodoViewType.Trash:
                        <div class="form-control">
                            <input type="checkbox" class="checkbox checkbox-sm checkbox-default checkbox-disabled" disabled="disabled"/>
                        </div>
                        break;
                    default:
                        <div class="form-control">
                            <input checked="@(Model.CompletedAt != null)" @onchange="OnCheckboxChanged" type="checkbox" class="checkbox checkbox-sm checkbox-info"/>
                        </div>
                        break;
                }
            </div>
            <div class="flex-1 ml-4 text-left">
                <div class="form-control w-full">
                    <input @ref="TitleInputRef" @bind="Model.Title" type="text" placeholder="New Todo" class="px-4 input input-sm w-full bg-transparent focus:bg-base-400 dark:focus:bg-slate-600"/>
                </div>
            </div>
            @switch (SelectedView)
            {
                case TodosView.TodoViewType.Logbook:
                    <div class="flex-1 justify-end">
                        <div class="w-full text-right">
                            <div class="badge badge-default">@Model.CompletedAt.Value.ToLocalTime()</div>
                        </div>
                    </div>
                    break;
                case TodosView.TodoViewType.Trash:
                    <div class="w-12 justify-end">
                        <button @onclick="HandleDeleteButtonClicked" type="button" class="btn btn-sm btn-ghost hover:btn-danger">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 stroke-red-500">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </button>
                    </div>
                    break;
                default:
                    <div class="w-12 justify-end">
                        <button @onclick="HandleTrashButtonClicked" type="button" class="btn btn-sm btn-ghost hover:btn-error">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6 scale-75">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0"/>
                            </svg>
                        </button>
                    </div>
                    break;
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public Todo Model { get; set; }

    [Parameter]
    public TodosView.TodoViewType SelectedView { get; set; } = TodosView.TodoViewType.Inbox;

    private ElementReference TitleInputRef { get; set; }

    private bool IsExpanded { get; set; } = true;

    public void Focus()
    {
        TitleInputRef.FocusAsync();
    }

    public void Expand()
    {
        IsExpanded = true;
    }

    public void Compact()
    {
        IsExpanded = false;
    }

    private async void OnCheckboxChanged(ChangeEventArgs obj)
    {
        if (obj.Value is not bool check) return;

        await TodoService.MarkCompletion(Model, check);
        StateHasChanged();
    }

    private async void HandleTrashButtonClicked(MouseEventArgs obj)
    {
        await TodoService.MoveToTrash(Model);
    }

    private async void HandleDeleteButtonClicked(MouseEventArgs obj)
    {
        await TodoService.Delete(Model);
    }

}